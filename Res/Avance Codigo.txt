#Chess Engine
class GameState():
    def __init__(self):
        self.board = [
            ["bR", "bN", "bB", "bQ", "bK", "bB", "bN", "bR"],
            ["bP", "bP", "bP", "bP", "bP", "bP", "bP", "bP"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["wP", "wP", "wP", "wP", "wP", "wP", "wP", "wP"],
            ["wR", "wN", "wB", "wQ", "wK", "wB", "wN", "wR"]
        ]
        self.moveFunction = {"P": self.getPawnMoves, "R": self.getRookMoves, "N": self.getKnightMoves,
                             "B": self.getBishopMoves, "Q": self.getQueenMoves, "K": self.getKingMoves}
        self.whiteToMove = True
        self.moveLog = []
        self.whiteKingPos = (7, 4)
        self.blackKingPos = (0, 4)
        self.checks = 0

    # DOES NOT WORK FOR CASTLING, EN.PASSANT AND PROMOTION
    def makeMove(self, move):
        self.board[move.startRow][move.startCol] = "--"
        self.board[move.endRow][move.endCol] = move.pieceMoved
        self.moveLog.append(move)
        self.whiteToMove = not self.whiteToMove
        if move.pieceMoved == "wK":
            self.whiteKingPos = (move.endRow, move.endCol)
        elif move.pieceMoved == "bK":
            self.blackKingPos = (move.endRow, move.endCol)
        if len(self.moveLog) > 6:
            self.checkStaleMate()#checks for repetition of movements

    def undoMove(self):
        if len(self.moveLog) != 0:
            moveToUndo = self.moveLog.pop()
            self.board[moveToUndo.startRow][moveToUndo.startCol] = moveToUndo.pieceMoved
            self.board[moveToUndo.endRow][moveToUndo.endCol] = moveToUndo.pieceCaptured
            self.whiteToMove = not self.whiteToMove
            if moveToUndo.pieceMoved == "wK":
                self.whiteKingPos = (moveToUndo.startRow, moveToUndo.startCol)
            elif moveToUndo.pieceMoved == "bK":
                self.blackKingPos = (moveToUndo.startRow, moveToUndo.startCol)

    """only legal moves"""
    def getValidMoves(self):
        possibleMoves = self.getAllPossibleMoves()
        legalMoves = []
        for move in possibleMoves:
            self.makeMove(move)
            self.whiteToMove = not self.whiteToMove
            if self.checkCheck():
                legalMoves.append(move)
            self.undoMove()
            self.whiteToMove = not self.whiteToMove
        if len(legalMoves) == 0 and self.checks > 0:
            print("CheckMate")
        elif len(legalMoves) == 0:
            print("Stalemate")
        return legalMoves

    def checkCheck(self):
        self.checks = 0
        noInterest = []
        kP = self.whiteKingPos if self.whiteToMove else self.blackKingPos #king pos
        for i in ["P", "Q", "K", "R", "N", "B"]:
            self.moveFunction[i](kP[0], kP[1], noInterest)
            if self.checks != 0:
                return False
        return True

    def checkStaleMate(self):
        pass


    """all possible moves """
    def getAllPossibleMoves(self):
        moves = []
        for r in range(len(self.board)):
            for c in range(len(self.board[r])):
                turn = self.board[r][c][0]  # w or b
                if (turn == "w" and self.whiteToMove) or (turn == "b" and not self.whiteToMove):
                    piece = self.board[r][c][1]
                    self.moveFunction[piece](r, c, moves)
        return moves

    """
    Getting all the possible move of the piece selected
    """
    def getPawnMoves(self, r, c, moves):
        if self.whiteToMove:
            if self.board[r - 1][c] == "--":
                moves.append(Move((r, c), (r - 1, c), self.board))
                if r == 6 and self.board[r - 2][c] == "--":
                    moves.append(Move((r, c), (r - 2, c), self.board))
            if c - 1 >= 0 and self.board[r - 1][c - 1][0] == "b":
                moves.append(Move((r, c), (r - 1, c - 1), self.board))
                if self.board[r - 1][c - 1] == "bP":
                    self.checks += 1
            if c + 1 <= 7 and self.board[r - 1][c + 1][0] == "b":
                moves.append(Move((r, c), (r - 1, c + 1), self.board))
                if self.board[r - 1][c + 1] == "bP":
                    self.checks += 1
        else:
            if self.board[r + 1][c] == "--":
                moves.append(Move((r, c), (r + 1, c), self.board))
                if r == 1 and self.board[r + 2][c] == "--":
                    moves.append(Move((r, c), (r + 2, c), self.board))
            if c - 1 >= 0 and self.board[r + 1][c - 1][0] == "w":
                moves.append(Move((r, c), (r + 1, c - 1), self.board))
                if self.board[r + 1][c - 1] == "wP":
                    self.checks += 1
            if c + 1 <= 7 and self.board[r + 1][c + 1][0] == "w":
                moves.append(Move((r, c), (r + 1, c + 1), self.board))
                if self.board[r + 1][c + 1] == "wP":
                    self.checks += 1

    def getRookMoves(self, r, c, moves):
        directions = [(-1, 0), (0, -1), (1, 0), (0, 1)]
        enemyColor = "b" if self.whiteToMove else "w"
        for d in directions:
            for i in range(1, 8):
                endRow = r + d[0] * i
                endColumn = c + d[1] * i
                if not (0 <= endRow < 8 and 0 <= endColumn < 8):
                    break
                endPiece = self.board[endRow][endColumn]
                if endPiece == "--":
                    moves.append(Move((r, c), (endRow, endColumn), self.board))
                elif endPiece[0] == enemyColor:
                    moves.append(Move((r, c), (endRow, endColumn), self.board))
                    if endPiece[1] == "R" or endPiece[1] == "Q":
                        self.checks += 1
                    break
                else:
                    break

    def getKnightMoves(self, r, c, moves):
        directions = [(2,-1), (2,1), (-2,-1), (-2,1), (-1,2), (1,2), (-1,-2), (1,-2)]
        allyColor = "w" if self.whiteToMove else "b"
        for d in directions:
            endRow = r + d[0]
            endCol = c + d[1]
            if not (0 <= endRow < 8 and 0 <= endCol < 8):
                continue
            endPiece = self.board[endRow][endCol]
            if endPiece[0] != allyColor:
                moves.append(Move((r, c), (endRow, endCol), self.board))
                if endPiece[1] == "N":
                    self.checks += 1

    def getBishopMoves(self, r, c, moves):
        directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
        enemyColor = "b" if self.whiteToMove else "w"
        for d in directions:
            for i in range(1, 8):
                endRow = r + d[0] * i
                endCol = c + d[1] * i
                if not (0 <= endRow < 8 and 0 <= endCol < 8):
                    break
                endPiece = self.board[endRow][endCol]
                if endPiece == "--":
                    moves.append(Move((r, c), (endRow, endCol), self.board))
                elif endPiece[0] == enemyColor:
                    moves.append(Move((r, c), (endRow, endCol), self.board))
                    if endPiece[1] == "B" or endPiece[1] == "Q":
                        self.checks += 1
                    break
                else:
                    break

    def getQueenMoves(self, r, c, moves):
        self.getRookMoves(r, c, moves)
        self.getBishopMoves(r, c, moves)

    def getKingMoves(self, r, c, moves):
        directions = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
        allyColor = "w" if self.whiteToMove else "b"
        for i in range(8):
            endRow = r + directions[i][0]
            endCol = c + directions[i][1]
            if not (0 <= endRow < 8 and 0 <= endCol < 8):
                continue
            endPiece = self.board[endRow][endCol]
            if endPiece[0] != allyColor:
                moves.append(Move((r, c), (endRow, endCol), self.board))
                if endPiece[1] == "K":
                    self.checks += 1


class Move():
    rankToRows = {"1": 7, "2": 6, "3": 5, "4": 4, "5": 3, "6": 2, "7": 1, "8": 0}
    rowsToRank = {v: k for k, v in rankToRows.items()}
    fileToCols = {"a": 0, "b": 1, "c": 2, "d": 3, "e": 4, "f": 5, "g": 6, "h": 7}
    colsToFile = {v: k for k, v in fileToCols.items()}

    def __init__(self, startSq, endSq, board):
        self.startRow = startSq[0]
        self.startCol = startSq[1]
        self.endRow = endSq[0]
        self.endCol = endSq[1]
        self.pieceMoved = board[self.startRow][self.startCol]
        self.pieceCaptured = board[self.endRow][self.endCol]
        self.moveID = self.startRow * 1000 + self.startCol * 100 + self.endRow * 10 + self.endCol

    """Overriding == method"""
    def __eq__(self, other):
        if isinstance(other, Move):
            return self.moveID == other.moveID

    def getChessNotation(self):
        return self.getRankFile(self.startRow, self.startCol) + self.getRankFile(self.endRow, self.endCol)

    def getRankFile(self, r, c):
        return self.colsToFile[c] + self.rowsToRank[r]



#Chess Main
import pygame as p
import ChessEngine

p.init() #initialize pygame
WIDTH = HEIGHT = 512
DIMENSIONS = 8 #8x8 of the board
SQUARE_SIZE = WIDTH // DIMENSIONS
MAX_FPS = 15
IMAGES = {}
peña = p.image.load("Res/peña2.png")

"""
Initialize global dic of images. In a function to do it just once
"""
def loadImages():
    pieces=["wP", "bP", "wR", "bR", "wB", "bB", "wN", "bN", "wQ", "bQ", "wK", "bK"]
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("ChessPieces/" + piece + ".png"),(SQUARE_SIZE, SQUARE_SIZE))

"""
 main, it will handle input and updating graphics
"""
def main():
    aux = True
    screen = p.display.set_mode((WIDTH,HEIGHT))
    clock = p.time.Clock()
    screen.fill(p.Color("white"))
    gs = ChessEngine.GameState()
    validMoves = gs.getValidMoves()
    moveMade = False #flg var for when a move is made
    loadImages() #only once
    running = True
    sqSelected = () #last click of the user
    playerClicks = []
    while(running):
        for e in p.event.get():
            if e.type == p.QUIT:
                running = False
            #mouse clicks
            elif e.type == p.MOUSEBUTTONDOWN:
                location = p.mouse.get_pos()
                col = location[0] // SQUARE_SIZE
                row = location[1] // SQUARE_SIZE
                if sqSelected == (row, col): #click on the same sq
                    sqSelected = ()
                    playerClicks = []
                else:
                    sqSelected = (row, col)
                    playerClicks.append(sqSelected)
                if len(playerClicks) == 2: #second click
                    move = ChessEngine.Move(playerClicks[0], playerClicks[1], gs.board)
                    #print(move.getChessNotation())
                    if move in validMoves:
                        gs.makeMove(move)
                        moveMade = True
                        sqSelected = ()
                        playerClicks = []
                    else:
                        playerClicks = [sqSelected]
                #key presses
            elif e.type == p.KEYDOWN:
                if e.key == p.K_z:
                    gs.undoMove()
                    moveMade = True
                if e.key == p.K_p:
                    p.transform.scale(peña, (HEIGHT, WIDTH))
                    screen.fill((255, 255, 255))
                    screen.blit(peña, (0,0))
                    p.display.flip()
                    aux = False
                if e.key == p.K_o:
                    aux = True

        if moveMade:
            validMoves = gs.getValidMoves()
            moveMade = False

        if(aux):
            drawGameState(screen,gs)
            clock.tick(MAX_FPS)
            p.display.flip()

"""
it draws all the graphics within the CURRENT game state
"""
def drawGameState(screen, gs):
    drawBoard(screen)
    drawPieces(screen, gs.board)

"""
Draws board
"""
def drawBoard(screen):
    colors = [p.Color("white"), p.Color("dark gray")] #light squares are even
    for r in range(DIMENSIONS):
        for c in range(DIMENSIONS):
            color = colors[(r+c)%2]
            p.draw.rect(screen, color, p.Rect(c*SQUARE_SIZE, r*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

"""
Draws pieces on the board
"""
def drawPieces(screen, board):
    for r in range(DIMENSIONS):
        for c in range(DIMENSIONS):
            piece = board[r][c]
            if piece != "--": #not empty square
                screen.blit(IMAGES[piece], p.Rect(c*SQUARE_SIZE, r*SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

if __name__ == "__main__":
    main()